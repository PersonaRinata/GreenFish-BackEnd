// Code generated by Kitex v0.6.2. DO NOT EDIT.

package apiservice

import (
	api "GreenFish/server/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return apiServiceServiceInfo
}

var apiServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ApiService"
	handlerType := (*api.ApiService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":      kitex.NewMethodInfo(registerHandler, newApiServiceRegisterArgs, newApiServiceRegisterResult, false),
		"Login":         kitex.NewMethodInfo(loginHandler, newApiServiceLoginArgs, newApiServiceLoginResult, false),
		"GetUserInfo":   kitex.NewMethodInfo(getUserInfoHandler, newApiServiceGetUserInfoArgs, newApiServiceGetUserInfoResult, false),
		"Feed":          kitex.NewMethodInfo(feedHandler, newApiServiceFeedArgs, newApiServiceFeedResult, false),
		"PublishVideo":  kitex.NewMethodInfo(publishVideoHandler, newApiServicePublishVideoArgs, newApiServicePublishVideoResult, false),
		"VideoList":     kitex.NewMethodInfo(videoListHandler, newApiServiceVideoListArgs, newApiServiceVideoListResult, false),
		"Favorite":      kitex.NewMethodInfo(favoriteHandler, newApiServiceFavoriteArgs, newApiServiceFavoriteResult, false),
		"FavoriteList":  kitex.NewMethodInfo(favoriteListHandler, newApiServiceFavoriteListArgs, newApiServiceFavoriteListResult, false),
		"Comment":       kitex.NewMethodInfo(commentHandler, newApiServiceCommentArgs, newApiServiceCommentResult, false),
		"CommentList":   kitex.NewMethodInfo(commentListHandler, newApiServiceCommentListArgs, newApiServiceCommentListResult, false),
		"Action":        kitex.NewMethodInfo(actionHandler, newApiServiceActionArgs, newApiServiceActionResult, false),
		"FollowingList": kitex.NewMethodInfo(followingListHandler, newApiServiceFollowingListArgs, newApiServiceFollowingListResult, false),
		"FollowerList":  kitex.NewMethodInfo(followerListHandler, newApiServiceFollowerListArgs, newApiServiceFollowerListResult, false),
		"FriendList":    kitex.NewMethodInfo(friendListHandler, newApiServiceFriendListArgs, newApiServiceFriendListResult, false),
		"ChatHistory":   kitex.NewMethodInfo(chatHistoryHandler, newApiServiceChatHistoryArgs, newApiServiceChatHistoryResult, false),
		"SentMessage":   kitex.NewMethodInfo(sentMessageHandler, newApiServiceSentMessageArgs, newApiServiceSentMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceRegisterArgs)
	realResult := result.(*api.ApiServiceRegisterResult)
	success, err := handler.(api.ApiService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceRegisterArgs() interface{} {
	return api.NewApiServiceRegisterArgs()
}

func newApiServiceRegisterResult() interface{} {
	return api.NewApiServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceLoginArgs)
	realResult := result.(*api.ApiServiceLoginResult)
	success, err := handler.(api.ApiService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceLoginArgs() interface{} {
	return api.NewApiServiceLoginArgs()
}

func newApiServiceLoginResult() interface{} {
	return api.NewApiServiceLoginResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceGetUserInfoArgs)
	realResult := result.(*api.ApiServiceGetUserInfoResult)
	success, err := handler.(api.ApiService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceGetUserInfoArgs() interface{} {
	return api.NewApiServiceGetUserInfoArgs()
}

func newApiServiceGetUserInfoResult() interface{} {
	return api.NewApiServiceGetUserInfoResult()
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFeedArgs)
	realResult := result.(*api.ApiServiceFeedResult)
	success, err := handler.(api.ApiService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFeedArgs() interface{} {
	return api.NewApiServiceFeedArgs()
}

func newApiServiceFeedResult() interface{} {
	return api.NewApiServiceFeedResult()
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServicePublishVideoArgs)
	realResult := result.(*api.ApiServicePublishVideoResult)
	success, err := handler.(api.ApiService).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServicePublishVideoArgs() interface{} {
	return api.NewApiServicePublishVideoArgs()
}

func newApiServicePublishVideoResult() interface{} {
	return api.NewApiServicePublishVideoResult()
}

func videoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceVideoListArgs)
	realResult := result.(*api.ApiServiceVideoListResult)
	success, err := handler.(api.ApiService).VideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceVideoListArgs() interface{} {
	return api.NewApiServiceVideoListArgs()
}

func newApiServiceVideoListResult() interface{} {
	return api.NewApiServiceVideoListResult()
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFavoriteArgs)
	realResult := result.(*api.ApiServiceFavoriteResult)
	success, err := handler.(api.ApiService).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFavoriteArgs() interface{} {
	return api.NewApiServiceFavoriteArgs()
}

func newApiServiceFavoriteResult() interface{} {
	return api.NewApiServiceFavoriteResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFavoriteListArgs)
	realResult := result.(*api.ApiServiceFavoriteListResult)
	success, err := handler.(api.ApiService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFavoriteListArgs() interface{} {
	return api.NewApiServiceFavoriteListArgs()
}

func newApiServiceFavoriteListResult() interface{} {
	return api.NewApiServiceFavoriteListResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceCommentArgs)
	realResult := result.(*api.ApiServiceCommentResult)
	success, err := handler.(api.ApiService).Comment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceCommentArgs() interface{} {
	return api.NewApiServiceCommentArgs()
}

func newApiServiceCommentResult() interface{} {
	return api.NewApiServiceCommentResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceCommentListArgs)
	realResult := result.(*api.ApiServiceCommentListResult)
	success, err := handler.(api.ApiService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceCommentListArgs() interface{} {
	return api.NewApiServiceCommentListArgs()
}

func newApiServiceCommentListResult() interface{} {
	return api.NewApiServiceCommentListResult()
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceActionArgs)
	realResult := result.(*api.ApiServiceActionResult)
	success, err := handler.(api.ApiService).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceActionArgs() interface{} {
	return api.NewApiServiceActionArgs()
}

func newApiServiceActionResult() interface{} {
	return api.NewApiServiceActionResult()
}

func followingListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFollowingListArgs)
	realResult := result.(*api.ApiServiceFollowingListResult)
	success, err := handler.(api.ApiService).FollowingList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFollowingListArgs() interface{} {
	return api.NewApiServiceFollowingListArgs()
}

func newApiServiceFollowingListResult() interface{} {
	return api.NewApiServiceFollowingListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFollowerListArgs)
	realResult := result.(*api.ApiServiceFollowerListResult)
	success, err := handler.(api.ApiService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFollowerListArgs() interface{} {
	return api.NewApiServiceFollowerListArgs()
}

func newApiServiceFollowerListResult() interface{} {
	return api.NewApiServiceFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFriendListArgs)
	realResult := result.(*api.ApiServiceFriendListResult)
	success, err := handler.(api.ApiService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFriendListArgs() interface{} {
	return api.NewApiServiceFriendListArgs()
}

func newApiServiceFriendListResult() interface{} {
	return api.NewApiServiceFriendListResult()
}

func chatHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceChatHistoryArgs)
	realResult := result.(*api.ApiServiceChatHistoryResult)
	success, err := handler.(api.ApiService).ChatHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceChatHistoryArgs() interface{} {
	return api.NewApiServiceChatHistoryArgs()
}

func newApiServiceChatHistoryResult() interface{} {
	return api.NewApiServiceChatHistoryResult()
}

func sentMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceSentMessageArgs)
	realResult := result.(*api.ApiServiceSentMessageResult)
	success, err := handler.(api.ApiService).SentMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceSentMessageArgs() interface{} {
	return api.NewApiServiceSentMessageArgs()
}

func newApiServiceSentMessageResult() interface{} {
	return api.NewApiServiceSentMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *api.QingyuUserRegisterRequest) (r *api.QingyuUserRegisterResponse, err error) {
	var _args api.ApiServiceRegisterArgs
	_args.Req = req
	var _result api.ApiServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *api.QingyuUserLoginRequest) (r *api.QingyuUserLoginResponse, err error) {
	var _args api.ApiServiceLoginArgs
	_args.Req = req
	var _result api.ApiServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *api.QingyuUserRequest) (r *api.QingyuUserResponse, err error) {
	var _args api.ApiServiceGetUserInfoArgs
	_args.Req = req
	var _result api.ApiServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Feed(ctx context.Context, req *api.QingyuFeedRequest) (r *api.QingyuFeedResponse, err error) {
	var _args api.ApiServiceFeedArgs
	_args.Req = req
	var _result api.ApiServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideo(ctx context.Context, req *api.QingyuPublishActionRequest) (r *api.QingyuPublishActionResponse, err error) {
	var _args api.ApiServicePublishVideoArgs
	_args.Req = req
	var _result api.ApiServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoList(ctx context.Context, req *api.QingyuPublishListRequest) (r *api.QingyuPublishListResponse, err error) {
	var _args api.ApiServiceVideoListArgs
	_args.Req = req
	var _result api.ApiServiceVideoListResult
	if err = p.c.Call(ctx, "VideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Favorite(ctx context.Context, req *api.QingyuFavoriteActionRequest) (r *api.QingyuFavoriteActionResponse, err error) {
	var _args api.ApiServiceFavoriteArgs
	_args.Req = req
	var _result api.ApiServiceFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *api.QingyuFavoriteListRequest) (r *api.QingyuFavoriteListResponse, err error) {
	var _args api.ApiServiceFavoriteListArgs
	_args.Req = req
	var _result api.ApiServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, req *api.QingyuCommentActionRequest) (r *api.QingyuCommentActionResponse, err error) {
	var _args api.ApiServiceCommentArgs
	_args.Req = req
	var _result api.ApiServiceCommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *api.QingyuCommentListRequest) (r *api.QingyuCommentListResponse, err error) {
	var _args api.ApiServiceCommentListArgs
	_args.Req = req
	var _result api.ApiServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Action(ctx context.Context, req *api.QingyuRelationActionRequest) (r *api.QingyuRelationActionResponse, err error) {
	var _args api.ApiServiceActionArgs
	_args.Req = req
	var _result api.ApiServiceActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowingList(ctx context.Context, req *api.QingyuRelationFollowListRequest) (r *api.QingyuRelationFollowListResponse, err error) {
	var _args api.ApiServiceFollowingListArgs
	_args.Req = req
	var _result api.ApiServiceFollowingListResult
	if err = p.c.Call(ctx, "FollowingList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *api.QingyuRelationFollowerListRequest) (r *api.QingyuRelationFollowerListResponse, err error) {
	var _args api.ApiServiceFollowerListArgs
	_args.Req = req
	var _result api.ApiServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *api.QingyuRelationFriendListRequest) (r *api.QingyuRelationFriendListResponse, err error) {
	var _args api.ApiServiceFriendListArgs
	_args.Req = req
	var _result api.ApiServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChatHistory(ctx context.Context, req *api.QingyuMessageChatRequest) (r *api.QingyuMessageChatResponse, err error) {
	var _args api.ApiServiceChatHistoryArgs
	_args.Req = req
	var _result api.ApiServiceChatHistoryResult
	if err = p.c.Call(ctx, "ChatHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SentMessage(ctx context.Context, req *api.QingyuMessageActionRequest) (r *api.QingyuMessageActionResponse, err error) {
	var _args api.ApiServiceSentMessageArgs
	_args.Req = req
	var _result api.ApiServiceSentMessageResult
	if err = p.c.Call(ctx, "SentMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
