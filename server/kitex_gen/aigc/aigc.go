// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package aigc

import (
	"GreenFish/server/kitex_gen/base"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type QingyuAigcQuestionRequest struct {
	UserId  int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Content string `thrift:"content,2" frugal:"2,default,string" json:"content"`
}

func NewQingyuAigcQuestionRequest() *QingyuAigcQuestionRequest {
	return &QingyuAigcQuestionRequest{}
}

func (p *QingyuAigcQuestionRequest) InitDefault() {
	*p = QingyuAigcQuestionRequest{}
}

func (p *QingyuAigcQuestionRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QingyuAigcQuestionRequest) GetContent() (v string) {
	return p.Content
}
func (p *QingyuAigcQuestionRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QingyuAigcQuestionRequest) SetContent(val string) {
	p.Content = val
}

var fieldIDToName_QingyuAigcQuestionRequest = map[int16]string{
	1: "user_id",
	2: "content",
}

func (p *QingyuAigcQuestionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcQuestionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcQuestionRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *QingyuAigcQuestionRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}

func (p *QingyuAigcQuestionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_question_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcQuestionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcQuestionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuAigcQuestionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcQuestionRequest(%+v)", *p)
}

func (p *QingyuAigcQuestionRequest) DeepEqual(ano *QingyuAigcQuestionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *QingyuAigcQuestionRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *QingyuAigcQuestionRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

type QingyuAigcQuestionResponse struct {
	BaseResp *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
	Msg      string                   `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewQingyuAigcQuestionResponse() *QingyuAigcQuestionResponse {
	return &QingyuAigcQuestionResponse{}
}

func (p *QingyuAigcQuestionResponse) InitDefault() {
	*p = QingyuAigcQuestionResponse{}
}

var QingyuAigcQuestionResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuAigcQuestionResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuAigcQuestionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *QingyuAigcQuestionResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *QingyuAigcQuestionResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}
func (p *QingyuAigcQuestionResponse) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_QingyuAigcQuestionResponse = map[int16]string{
	1: "base_resp",
	2: "msg",
}

func (p *QingyuAigcQuestionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuAigcQuestionResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcQuestionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcQuestionResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuAigcQuestionResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *QingyuAigcQuestionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_question_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcQuestionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcQuestionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuAigcQuestionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcQuestionResponse(%+v)", *p)
}

func (p *QingyuAigcQuestionResponse) DeepEqual(ano *QingyuAigcQuestionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *QingyuAigcQuestionResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QingyuAigcQuestionResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type QingyuAigcIssueListRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewQingyuAigcIssueListRequest() *QingyuAigcIssueListRequest {
	return &QingyuAigcIssueListRequest{}
}

func (p *QingyuAigcIssueListRequest) InitDefault() {
	*p = QingyuAigcIssueListRequest{}
}

func (p *QingyuAigcIssueListRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *QingyuAigcIssueListRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_QingyuAigcIssueListRequest = map[int16]string{
	1: "user_id",
}

func (p *QingyuAigcIssueListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcIssueListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcIssueListRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *QingyuAigcIssueListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_issueList_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcIssueListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcIssueListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcIssueListRequest(%+v)", *p)
}

func (p *QingyuAigcIssueListRequest) DeepEqual(ano *QingyuAigcIssueListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *QingyuAigcIssueListRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type QingyuAigcIssueListResponse struct {
	BaseResp *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
	Msg      string                   `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewQingyuAigcIssueListResponse() *QingyuAigcIssueListResponse {
	return &QingyuAigcIssueListResponse{}
}

func (p *QingyuAigcIssueListResponse) InitDefault() {
	*p = QingyuAigcIssueListResponse{}
}

var QingyuAigcIssueListResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuAigcIssueListResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuAigcIssueListResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *QingyuAigcIssueListResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *QingyuAigcIssueListResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}
func (p *QingyuAigcIssueListResponse) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_QingyuAigcIssueListResponse = map[int16]string{
	1: "base_resp",
	2: "msg",
}

func (p *QingyuAigcIssueListResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuAigcIssueListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcIssueListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcIssueListResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuAigcIssueListResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *QingyuAigcIssueListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_issueList_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcIssueListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcIssueListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuAigcIssueListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcIssueListResponse(%+v)", *p)
}

func (p *QingyuAigcIssueListResponse) DeepEqual(ano *QingyuAigcIssueListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *QingyuAigcIssueListResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QingyuAigcIssueListResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type QingyuAigcChooseWordRequest struct {
	UserId  int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Content string `thrift:"content,2" frugal:"2,default,string" json:"content"`
}

func NewQingyuAigcChooseWordRequest() *QingyuAigcChooseWordRequest {
	return &QingyuAigcChooseWordRequest{}
}

func (p *QingyuAigcChooseWordRequest) InitDefault() {
	*p = QingyuAigcChooseWordRequest{}
}

func (p *QingyuAigcChooseWordRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QingyuAigcChooseWordRequest) GetContent() (v string) {
	return p.Content
}
func (p *QingyuAigcChooseWordRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QingyuAigcChooseWordRequest) SetContent(val string) {
	p.Content = val
}

var fieldIDToName_QingyuAigcChooseWordRequest = map[int16]string{
	1: "user_id",
	2: "content",
}

func (p *QingyuAigcChooseWordRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcChooseWordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcChooseWordRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *QingyuAigcChooseWordRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}

func (p *QingyuAigcChooseWordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_choose_word_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcChooseWordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcChooseWordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuAigcChooseWordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcChooseWordRequest(%+v)", *p)
}

func (p *QingyuAigcChooseWordRequest) DeepEqual(ano *QingyuAigcChooseWordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *QingyuAigcChooseWordRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *QingyuAigcChooseWordRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

type QingyuAigcChooseWordResponse struct {
	BaseResp *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
	Msg      string                   `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewQingyuAigcChooseWordResponse() *QingyuAigcChooseWordResponse {
	return &QingyuAigcChooseWordResponse{}
}

func (p *QingyuAigcChooseWordResponse) InitDefault() {
	*p = QingyuAigcChooseWordResponse{}
}

var QingyuAigcChooseWordResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuAigcChooseWordResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuAigcChooseWordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *QingyuAigcChooseWordResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *QingyuAigcChooseWordResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}
func (p *QingyuAigcChooseWordResponse) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_QingyuAigcChooseWordResponse = map[int16]string{
	1: "base_resp",
	2: "msg",
}

func (p *QingyuAigcChooseWordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuAigcChooseWordResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcChooseWordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcChooseWordResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuAigcChooseWordResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *QingyuAigcChooseWordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_choose_word_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcChooseWordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcChooseWordResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuAigcChooseWordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcChooseWordResponse(%+v)", *p)
}

func (p *QingyuAigcChooseWordResponse) DeepEqual(ano *QingyuAigcChooseWordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *QingyuAigcChooseWordResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QingyuAigcChooseWordResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type QingyuAigcDoctorAnalyseRequest struct {
	UserId  int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Content []string `thrift:"content,2" frugal:"2,default,list<string>" json:"content"`
}

func NewQingyuAigcDoctorAnalyseRequest() *QingyuAigcDoctorAnalyseRequest {
	return &QingyuAigcDoctorAnalyseRequest{}
}

func (p *QingyuAigcDoctorAnalyseRequest) InitDefault() {
	*p = QingyuAigcDoctorAnalyseRequest{}
}

func (p *QingyuAigcDoctorAnalyseRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QingyuAigcDoctorAnalyseRequest) GetContent() (v []string) {
	return p.Content
}
func (p *QingyuAigcDoctorAnalyseRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QingyuAigcDoctorAnalyseRequest) SetContent(val []string) {
	p.Content = val
}

var fieldIDToName_QingyuAigcDoctorAnalyseRequest = map[int16]string{
	1: "user_id",
	2: "content",
}

func (p *QingyuAigcDoctorAnalyseRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcDoctorAnalyseRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *QingyuAigcDoctorAnalyseRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Content = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Content = append(p.Content, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *QingyuAigcDoctorAnalyseRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_doctor_analyse_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Content)); err != nil {
		return err
	}
	for _, v := range p.Content {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcDoctorAnalyseRequest(%+v)", *p)
}

func (p *QingyuAigcDoctorAnalyseRequest) DeepEqual(ano *QingyuAigcDoctorAnalyseRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *QingyuAigcDoctorAnalyseRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *QingyuAigcDoctorAnalyseRequest) Field2DeepEqual(src []string) bool {

	if len(p.Content) != len(src) {
		return false
	}
	for i, v := range p.Content {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type QingyuAigcDoctorAnalyseResponse struct {
	BaseResp *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
	Msg      string                   `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewQingyuAigcDoctorAnalyseResponse() *QingyuAigcDoctorAnalyseResponse {
	return &QingyuAigcDoctorAnalyseResponse{}
}

func (p *QingyuAigcDoctorAnalyseResponse) InitDefault() {
	*p = QingyuAigcDoctorAnalyseResponse{}
}

var QingyuAigcDoctorAnalyseResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuAigcDoctorAnalyseResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuAigcDoctorAnalyseResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *QingyuAigcDoctorAnalyseResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *QingyuAigcDoctorAnalyseResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}
func (p *QingyuAigcDoctorAnalyseResponse) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_QingyuAigcDoctorAnalyseResponse = map[int16]string{
	1: "base_resp",
	2: "msg",
}

func (p *QingyuAigcDoctorAnalyseResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuAigcDoctorAnalyseResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuAigcDoctorAnalyseResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuAigcDoctorAnalyseResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *QingyuAigcDoctorAnalyseResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_aigc_doctor_analyse_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuAigcDoctorAnalyseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuAigcDoctorAnalyseResponse(%+v)", *p)
}

func (p *QingyuAigcDoctorAnalyseResponse) DeepEqual(ano *QingyuAigcDoctorAnalyseResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *QingyuAigcDoctorAnalyseResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QingyuAigcDoctorAnalyseResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type AIGCServer interface {
	UserAskQuestion(ctx context.Context, req *QingyuAigcQuestionRequest) (r *QingyuAigcQuestionResponse, err error)

	AnalyseIssueList(ctx context.Context, req *QingyuAigcIssueListRequest) (r *QingyuAigcIssueListResponse, err error)

	ChooseWord(ctx context.Context, req *QingyuAigcChooseWordRequest) (r *QingyuAigcChooseWordResponse, err error)

	DoctorAnalyse(ctx context.Context, req *QingyuAigcDoctorAnalyseRequest) (r *QingyuAigcDoctorAnalyseResponse, err error)
}

type AIGCServerClient struct {
	c thrift.TClient
}

func NewAIGCServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AIGCServerClient {
	return &AIGCServerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAIGCServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AIGCServerClient {
	return &AIGCServerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAIGCServerClient(c thrift.TClient) *AIGCServerClient {
	return &AIGCServerClient{
		c: c,
	}
}

func (p *AIGCServerClient) Client_() thrift.TClient {
	return p.c
}

func (p *AIGCServerClient) UserAskQuestion(ctx context.Context, req *QingyuAigcQuestionRequest) (r *QingyuAigcQuestionResponse, err error) {
	var _args AIGCServerUserAskQuestionArgs
	_args.Req = req
	var _result AIGCServerUserAskQuestionResult
	if err = p.Client_().Call(ctx, "UserAskQuestion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AIGCServerClient) AnalyseIssueList(ctx context.Context, req *QingyuAigcIssueListRequest) (r *QingyuAigcIssueListResponse, err error) {
	var _args AIGCServerAnalyseIssueListArgs
	_args.Req = req
	var _result AIGCServerAnalyseIssueListResult
	if err = p.Client_().Call(ctx, "AnalyseIssueList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AIGCServerClient) ChooseWord(ctx context.Context, req *QingyuAigcChooseWordRequest) (r *QingyuAigcChooseWordResponse, err error) {
	var _args AIGCServerChooseWordArgs
	_args.Req = req
	var _result AIGCServerChooseWordResult
	if err = p.Client_().Call(ctx, "ChooseWord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AIGCServerClient) DoctorAnalyse(ctx context.Context, req *QingyuAigcDoctorAnalyseRequest) (r *QingyuAigcDoctorAnalyseResponse, err error) {
	var _args AIGCServerDoctorAnalyseArgs
	_args.Req = req
	var _result AIGCServerDoctorAnalyseResult
	if err = p.Client_().Call(ctx, "DoctorAnalyse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type AIGCServerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AIGCServer
}

func (p *AIGCServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AIGCServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AIGCServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAIGCServerProcessor(handler AIGCServer) *AIGCServerProcessor {
	self := &AIGCServerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("UserAskQuestion", &aIGCServerProcessorUserAskQuestion{handler: handler})
	self.AddToProcessorMap("AnalyseIssueList", &aIGCServerProcessorAnalyseIssueList{handler: handler})
	self.AddToProcessorMap("ChooseWord", &aIGCServerProcessorChooseWord{handler: handler})
	self.AddToProcessorMap("DoctorAnalyse", &aIGCServerProcessorDoctorAnalyse{handler: handler})
	return self
}
func (p *AIGCServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type aIGCServerProcessorUserAskQuestion struct {
	handler AIGCServer
}

func (p *aIGCServerProcessorUserAskQuestion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AIGCServerUserAskQuestionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UserAskQuestion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AIGCServerUserAskQuestionResult{}
	var retval *QingyuAigcQuestionResponse
	if retval, err2 = p.handler.UserAskQuestion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserAskQuestion: "+err2.Error())
		oprot.WriteMessageBegin("UserAskQuestion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UserAskQuestion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aIGCServerProcessorAnalyseIssueList struct {
	handler AIGCServer
}

func (p *aIGCServerProcessorAnalyseIssueList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AIGCServerAnalyseIssueListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AnalyseIssueList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AIGCServerAnalyseIssueListResult{}
	var retval *QingyuAigcIssueListResponse
	if retval, err2 = p.handler.AnalyseIssueList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AnalyseIssueList: "+err2.Error())
		oprot.WriteMessageBegin("AnalyseIssueList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AnalyseIssueList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aIGCServerProcessorChooseWord struct {
	handler AIGCServer
}

func (p *aIGCServerProcessorChooseWord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AIGCServerChooseWordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ChooseWord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AIGCServerChooseWordResult{}
	var retval *QingyuAigcChooseWordResponse
	if retval, err2 = p.handler.ChooseWord(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChooseWord: "+err2.Error())
		oprot.WriteMessageBegin("ChooseWord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ChooseWord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aIGCServerProcessorDoctorAnalyse struct {
	handler AIGCServer
}

func (p *aIGCServerProcessorDoctorAnalyse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AIGCServerDoctorAnalyseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DoctorAnalyse", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AIGCServerDoctorAnalyseResult{}
	var retval *QingyuAigcDoctorAnalyseResponse
	if retval, err2 = p.handler.DoctorAnalyse(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoctorAnalyse: "+err2.Error())
		oprot.WriteMessageBegin("DoctorAnalyse", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DoctorAnalyse", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type AIGCServerUserAskQuestionArgs struct {
	Req *QingyuAigcQuestionRequest `thrift:"req,1" frugal:"1,default,QingyuAigcQuestionRequest" json:"req"`
}

func NewAIGCServerUserAskQuestionArgs() *AIGCServerUserAskQuestionArgs {
	return &AIGCServerUserAskQuestionArgs{}
}

func (p *AIGCServerUserAskQuestionArgs) InitDefault() {
	*p = AIGCServerUserAskQuestionArgs{}
}

var AIGCServerUserAskQuestionArgs_Req_DEFAULT *QingyuAigcQuestionRequest

func (p *AIGCServerUserAskQuestionArgs) GetReq() (v *QingyuAigcQuestionRequest) {
	if !p.IsSetReq() {
		return AIGCServerUserAskQuestionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AIGCServerUserAskQuestionArgs) SetReq(val *QingyuAigcQuestionRequest) {
	p.Req = val
}

var fieldIDToName_AIGCServerUserAskQuestionArgs = map[int16]string{
	1: "req",
}

func (p *AIGCServerUserAskQuestionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AIGCServerUserAskQuestionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerUserAskQuestionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerUserAskQuestionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuAigcQuestionRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerUserAskQuestionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserAskQuestion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerUserAskQuestionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AIGCServerUserAskQuestionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerUserAskQuestionArgs(%+v)", *p)
}

func (p *AIGCServerUserAskQuestionArgs) DeepEqual(ano *AIGCServerUserAskQuestionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AIGCServerUserAskQuestionArgs) Field1DeepEqual(src *QingyuAigcQuestionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AIGCServerUserAskQuestionResult struct {
	Success *QingyuAigcQuestionResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuAigcQuestionResponse" json:"success,omitempty"`
}

func NewAIGCServerUserAskQuestionResult() *AIGCServerUserAskQuestionResult {
	return &AIGCServerUserAskQuestionResult{}
}

func (p *AIGCServerUserAskQuestionResult) InitDefault() {
	*p = AIGCServerUserAskQuestionResult{}
}

var AIGCServerUserAskQuestionResult_Success_DEFAULT *QingyuAigcQuestionResponse

func (p *AIGCServerUserAskQuestionResult) GetSuccess() (v *QingyuAigcQuestionResponse) {
	if !p.IsSetSuccess() {
		return AIGCServerUserAskQuestionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AIGCServerUserAskQuestionResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuAigcQuestionResponse)
}

var fieldIDToName_AIGCServerUserAskQuestionResult = map[int16]string{
	0: "success",
}

func (p *AIGCServerUserAskQuestionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AIGCServerUserAskQuestionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerUserAskQuestionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerUserAskQuestionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuAigcQuestionResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerUserAskQuestionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserAskQuestion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerUserAskQuestionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AIGCServerUserAskQuestionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerUserAskQuestionResult(%+v)", *p)
}

func (p *AIGCServerUserAskQuestionResult) DeepEqual(ano *AIGCServerUserAskQuestionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AIGCServerUserAskQuestionResult) Field0DeepEqual(src *QingyuAigcQuestionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AIGCServerAnalyseIssueListArgs struct {
	Req *QingyuAigcIssueListRequest `thrift:"req,1" frugal:"1,default,QingyuAigcIssueListRequest" json:"req"`
}

func NewAIGCServerAnalyseIssueListArgs() *AIGCServerAnalyseIssueListArgs {
	return &AIGCServerAnalyseIssueListArgs{}
}

func (p *AIGCServerAnalyseIssueListArgs) InitDefault() {
	*p = AIGCServerAnalyseIssueListArgs{}
}

var AIGCServerAnalyseIssueListArgs_Req_DEFAULT *QingyuAigcIssueListRequest

func (p *AIGCServerAnalyseIssueListArgs) GetReq() (v *QingyuAigcIssueListRequest) {
	if !p.IsSetReq() {
		return AIGCServerAnalyseIssueListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AIGCServerAnalyseIssueListArgs) SetReq(val *QingyuAigcIssueListRequest) {
	p.Req = val
}

var fieldIDToName_AIGCServerAnalyseIssueListArgs = map[int16]string{
	1: "req",
}

func (p *AIGCServerAnalyseIssueListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AIGCServerAnalyseIssueListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerAnalyseIssueListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerAnalyseIssueListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuAigcIssueListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerAnalyseIssueListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AnalyseIssueList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerAnalyseIssueListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AIGCServerAnalyseIssueListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerAnalyseIssueListArgs(%+v)", *p)
}

func (p *AIGCServerAnalyseIssueListArgs) DeepEqual(ano *AIGCServerAnalyseIssueListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AIGCServerAnalyseIssueListArgs) Field1DeepEqual(src *QingyuAigcIssueListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AIGCServerAnalyseIssueListResult struct {
	Success *QingyuAigcIssueListResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuAigcIssueListResponse" json:"success,omitempty"`
}

func NewAIGCServerAnalyseIssueListResult() *AIGCServerAnalyseIssueListResult {
	return &AIGCServerAnalyseIssueListResult{}
}

func (p *AIGCServerAnalyseIssueListResult) InitDefault() {
	*p = AIGCServerAnalyseIssueListResult{}
}

var AIGCServerAnalyseIssueListResult_Success_DEFAULT *QingyuAigcIssueListResponse

func (p *AIGCServerAnalyseIssueListResult) GetSuccess() (v *QingyuAigcIssueListResponse) {
	if !p.IsSetSuccess() {
		return AIGCServerAnalyseIssueListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AIGCServerAnalyseIssueListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuAigcIssueListResponse)
}

var fieldIDToName_AIGCServerAnalyseIssueListResult = map[int16]string{
	0: "success",
}

func (p *AIGCServerAnalyseIssueListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AIGCServerAnalyseIssueListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerAnalyseIssueListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerAnalyseIssueListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuAigcIssueListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerAnalyseIssueListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AnalyseIssueList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerAnalyseIssueListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AIGCServerAnalyseIssueListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerAnalyseIssueListResult(%+v)", *p)
}

func (p *AIGCServerAnalyseIssueListResult) DeepEqual(ano *AIGCServerAnalyseIssueListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AIGCServerAnalyseIssueListResult) Field0DeepEqual(src *QingyuAigcIssueListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AIGCServerChooseWordArgs struct {
	Req *QingyuAigcChooseWordRequest `thrift:"req,1" frugal:"1,default,QingyuAigcChooseWordRequest" json:"req"`
}

func NewAIGCServerChooseWordArgs() *AIGCServerChooseWordArgs {
	return &AIGCServerChooseWordArgs{}
}

func (p *AIGCServerChooseWordArgs) InitDefault() {
	*p = AIGCServerChooseWordArgs{}
}

var AIGCServerChooseWordArgs_Req_DEFAULT *QingyuAigcChooseWordRequest

func (p *AIGCServerChooseWordArgs) GetReq() (v *QingyuAigcChooseWordRequest) {
	if !p.IsSetReq() {
		return AIGCServerChooseWordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AIGCServerChooseWordArgs) SetReq(val *QingyuAigcChooseWordRequest) {
	p.Req = val
}

var fieldIDToName_AIGCServerChooseWordArgs = map[int16]string{
	1: "req",
}

func (p *AIGCServerChooseWordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AIGCServerChooseWordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerChooseWordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerChooseWordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuAigcChooseWordRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerChooseWordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChooseWord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerChooseWordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AIGCServerChooseWordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerChooseWordArgs(%+v)", *p)
}

func (p *AIGCServerChooseWordArgs) DeepEqual(ano *AIGCServerChooseWordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AIGCServerChooseWordArgs) Field1DeepEqual(src *QingyuAigcChooseWordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AIGCServerChooseWordResult struct {
	Success *QingyuAigcChooseWordResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuAigcChooseWordResponse" json:"success,omitempty"`
}

func NewAIGCServerChooseWordResult() *AIGCServerChooseWordResult {
	return &AIGCServerChooseWordResult{}
}

func (p *AIGCServerChooseWordResult) InitDefault() {
	*p = AIGCServerChooseWordResult{}
}

var AIGCServerChooseWordResult_Success_DEFAULT *QingyuAigcChooseWordResponse

func (p *AIGCServerChooseWordResult) GetSuccess() (v *QingyuAigcChooseWordResponse) {
	if !p.IsSetSuccess() {
		return AIGCServerChooseWordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AIGCServerChooseWordResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuAigcChooseWordResponse)
}

var fieldIDToName_AIGCServerChooseWordResult = map[int16]string{
	0: "success",
}

func (p *AIGCServerChooseWordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AIGCServerChooseWordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerChooseWordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerChooseWordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuAigcChooseWordResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerChooseWordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChooseWord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerChooseWordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AIGCServerChooseWordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerChooseWordResult(%+v)", *p)
}

func (p *AIGCServerChooseWordResult) DeepEqual(ano *AIGCServerChooseWordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AIGCServerChooseWordResult) Field0DeepEqual(src *QingyuAigcChooseWordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AIGCServerDoctorAnalyseArgs struct {
	Req *QingyuAigcDoctorAnalyseRequest `thrift:"req,1" frugal:"1,default,QingyuAigcDoctorAnalyseRequest" json:"req"`
}

func NewAIGCServerDoctorAnalyseArgs() *AIGCServerDoctorAnalyseArgs {
	return &AIGCServerDoctorAnalyseArgs{}
}

func (p *AIGCServerDoctorAnalyseArgs) InitDefault() {
	*p = AIGCServerDoctorAnalyseArgs{}
}

var AIGCServerDoctorAnalyseArgs_Req_DEFAULT *QingyuAigcDoctorAnalyseRequest

func (p *AIGCServerDoctorAnalyseArgs) GetReq() (v *QingyuAigcDoctorAnalyseRequest) {
	if !p.IsSetReq() {
		return AIGCServerDoctorAnalyseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AIGCServerDoctorAnalyseArgs) SetReq(val *QingyuAigcDoctorAnalyseRequest) {
	p.Req = val
}

var fieldIDToName_AIGCServerDoctorAnalyseArgs = map[int16]string{
	1: "req",
}

func (p *AIGCServerDoctorAnalyseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AIGCServerDoctorAnalyseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerDoctorAnalyseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerDoctorAnalyseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuAigcDoctorAnalyseRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerDoctorAnalyseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DoctorAnalyse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerDoctorAnalyseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AIGCServerDoctorAnalyseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerDoctorAnalyseArgs(%+v)", *p)
}

func (p *AIGCServerDoctorAnalyseArgs) DeepEqual(ano *AIGCServerDoctorAnalyseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AIGCServerDoctorAnalyseArgs) Field1DeepEqual(src *QingyuAigcDoctorAnalyseRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AIGCServerDoctorAnalyseResult struct {
	Success *QingyuAigcDoctorAnalyseResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuAigcDoctorAnalyseResponse" json:"success,omitempty"`
}

func NewAIGCServerDoctorAnalyseResult() *AIGCServerDoctorAnalyseResult {
	return &AIGCServerDoctorAnalyseResult{}
}

func (p *AIGCServerDoctorAnalyseResult) InitDefault() {
	*p = AIGCServerDoctorAnalyseResult{}
}

var AIGCServerDoctorAnalyseResult_Success_DEFAULT *QingyuAigcDoctorAnalyseResponse

func (p *AIGCServerDoctorAnalyseResult) GetSuccess() (v *QingyuAigcDoctorAnalyseResponse) {
	if !p.IsSetSuccess() {
		return AIGCServerDoctorAnalyseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AIGCServerDoctorAnalyseResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuAigcDoctorAnalyseResponse)
}

var fieldIDToName_AIGCServerDoctorAnalyseResult = map[int16]string{
	0: "success",
}

func (p *AIGCServerDoctorAnalyseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AIGCServerDoctorAnalyseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AIGCServerDoctorAnalyseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AIGCServerDoctorAnalyseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuAigcDoctorAnalyseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AIGCServerDoctorAnalyseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DoctorAnalyse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AIGCServerDoctorAnalyseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AIGCServerDoctorAnalyseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AIGCServerDoctorAnalyseResult(%+v)", *p)
}

func (p *AIGCServerDoctorAnalyseResult) DeepEqual(ano *AIGCServerDoctorAnalyseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AIGCServerDoctorAnalyseResult) Field0DeepEqual(src *QingyuAigcDoctorAnalyseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
