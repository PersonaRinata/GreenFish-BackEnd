// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package sociality

import (
	"GreenFish/server/kitex_gen/base"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type QingyuRelationActionRequest struct {
	UserId     int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToUserId   int64 `thrift:"to_user_id,2" frugal:"2,default,i64" json:"to_user_id"`
	ActionType int8  `thrift:"action_type,3" frugal:"3,default,i8" json:"action_type"`
}

func NewQingyuRelationActionRequest() *QingyuRelationActionRequest {
	return &QingyuRelationActionRequest{}
}

func (p *QingyuRelationActionRequest) InitDefault() {
	*p = QingyuRelationActionRequest{}
}

func (p *QingyuRelationActionRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QingyuRelationActionRequest) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *QingyuRelationActionRequest) GetActionType() (v int8) {
	return p.ActionType
}
func (p *QingyuRelationActionRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QingyuRelationActionRequest) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *QingyuRelationActionRequest) SetActionType(val int8) {
	p.ActionType = val
}

var fieldIDToName_QingyuRelationActionRequest = map[int16]string{
	1: "user_id",
	2: "to_user_id",
	3: "action_type",
}

func (p *QingyuRelationActionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuRelationActionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuRelationActionRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *QingyuRelationActionRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ToUserId = v
	}
	return nil
}

func (p *QingyuRelationActionRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.ActionType = v
	}
	return nil
}

func (p *QingyuRelationActionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_relation_action_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuRelationActionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuRelationActionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuRelationActionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action_type", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.ActionType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QingyuRelationActionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuRelationActionRequest(%+v)", *p)
}

func (p *QingyuRelationActionRequest) DeepEqual(ano *QingyuRelationActionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToUserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ActionType) {
		return false
	}
	return true
}

func (p *QingyuRelationActionRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *QingyuRelationActionRequest) Field2DeepEqual(src int64) bool {

	if p.ToUserId != src {
		return false
	}
	return true
}
func (p *QingyuRelationActionRequest) Field3DeepEqual(src int8) bool {

	if p.ActionType != src {
		return false
	}
	return true
}

type QingyuRelationActionResponse struct {
	BaseResp *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
}

func NewQingyuRelationActionResponse() *QingyuRelationActionResponse {
	return &QingyuRelationActionResponse{}
}

func (p *QingyuRelationActionResponse) InitDefault() {
	*p = QingyuRelationActionResponse{}
}

var QingyuRelationActionResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuRelationActionResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuRelationActionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *QingyuRelationActionResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}

var fieldIDToName_QingyuRelationActionResponse = map[int16]string{
	1: "base_resp",
}

func (p *QingyuRelationActionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuRelationActionResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuRelationActionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuRelationActionResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuRelationActionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_relation_action_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuRelationActionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuRelationActionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuRelationActionResponse(%+v)", *p)
}

func (p *QingyuRelationActionResponse) DeepEqual(ano *QingyuRelationActionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *QingyuRelationActionResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type QingyuGetRelationIdListRequest struct {
	ViewerId int64 `thrift:"viewer_id,1" frugal:"1,default,i64" json:"viewer_id"`
	OwnerId  int64 `thrift:"owner_id,2" frugal:"2,default,i64" json:"owner_id"`
	Option   int8  `thrift:"option,3" frugal:"3,default,i8" json:"option"`
}

func NewQingyuGetRelationIdListRequest() *QingyuGetRelationIdListRequest {
	return &QingyuGetRelationIdListRequest{}
}

func (p *QingyuGetRelationIdListRequest) InitDefault() {
	*p = QingyuGetRelationIdListRequest{}
}

func (p *QingyuGetRelationIdListRequest) GetViewerId() (v int64) {
	return p.ViewerId
}

func (p *QingyuGetRelationIdListRequest) GetOwnerId() (v int64) {
	return p.OwnerId
}

func (p *QingyuGetRelationIdListRequest) GetOption() (v int8) {
	return p.Option
}
func (p *QingyuGetRelationIdListRequest) SetViewerId(val int64) {
	p.ViewerId = val
}
func (p *QingyuGetRelationIdListRequest) SetOwnerId(val int64) {
	p.OwnerId = val
}
func (p *QingyuGetRelationIdListRequest) SetOption(val int8) {
	p.Option = val
}

var fieldIDToName_QingyuGetRelationIdListRequest = map[int16]string{
	1: "viewer_id",
	2: "owner_id",
	3: "option",
}

func (p *QingyuGetRelationIdListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuGetRelationIdListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuGetRelationIdListRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ViewerId = v
	}
	return nil
}

func (p *QingyuGetRelationIdListRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OwnerId = v
	}
	return nil
}

func (p *QingyuGetRelationIdListRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Option = v
	}
	return nil
}

func (p *QingyuGetRelationIdListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_get_relation_id_list_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuGetRelationIdListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("viewer_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ViewerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuGetRelationIdListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OwnerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuGetRelationIdListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("option", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Option); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QingyuGetRelationIdListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuGetRelationIdListRequest(%+v)", *p)
}

func (p *QingyuGetRelationIdListRequest) DeepEqual(ano *QingyuGetRelationIdListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ViewerId) {
		return false
	}
	if !p.Field2DeepEqual(ano.OwnerId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Option) {
		return false
	}
	return true
}

func (p *QingyuGetRelationIdListRequest) Field1DeepEqual(src int64) bool {

	if p.ViewerId != src {
		return false
	}
	return true
}
func (p *QingyuGetRelationIdListRequest) Field2DeepEqual(src int64) bool {

	if p.OwnerId != src {
		return false
	}
	return true
}
func (p *QingyuGetRelationIdListRequest) Field3DeepEqual(src int8) bool {

	if p.Option != src {
		return false
	}
	return true
}

type QingyuGetRelationIdListResponse struct {
	BaseResp   *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
	UserIdList []int64                  `thrift:"user_id_list,2" frugal:"2,default,list<i64>" json:"user_id_list"`
}

func NewQingyuGetRelationIdListResponse() *QingyuGetRelationIdListResponse {
	return &QingyuGetRelationIdListResponse{}
}

func (p *QingyuGetRelationIdListResponse) InitDefault() {
	*p = QingyuGetRelationIdListResponse{}
}

var QingyuGetRelationIdListResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuGetRelationIdListResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuGetRelationIdListResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *QingyuGetRelationIdListResponse) GetUserIdList() (v []int64) {
	return p.UserIdList
}
func (p *QingyuGetRelationIdListResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}
func (p *QingyuGetRelationIdListResponse) SetUserIdList(val []int64) {
	p.UserIdList = val
}

var fieldIDToName_QingyuGetRelationIdListResponse = map[int16]string{
	1: "base_resp",
	2: "user_id_list",
}

func (p *QingyuGetRelationIdListResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuGetRelationIdListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuGetRelationIdListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuGetRelationIdListResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuGetRelationIdListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.UserIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.UserIdList = append(p.UserIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *QingyuGetRelationIdListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_get_relation_id_list_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuGetRelationIdListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuGetRelationIdListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.UserIdList)); err != nil {
		return err
	}
	for _, v := range p.UserIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuGetRelationIdListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuGetRelationIdListResponse(%+v)", *p)
}

func (p *QingyuGetRelationIdListResponse) DeepEqual(ano *QingyuGetRelationIdListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserIdList) {
		return false
	}
	return true
}

func (p *QingyuGetRelationIdListResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QingyuGetRelationIdListResponse) Field2DeepEqual(src []int64) bool {

	if len(p.UserIdList) != len(src) {
		return false
	}
	for i, v := range p.UserIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type QingyuGetSocialInfoRequest struct {
	ViewerId int64 `thrift:"viewer_id,1" frugal:"1,default,i64" json:"viewer_id"`
	OwnerId  int64 `thrift:"owner_id,2" frugal:"2,default,i64" json:"owner_id"`
}

func NewQingyuGetSocialInfoRequest() *QingyuGetSocialInfoRequest {
	return &QingyuGetSocialInfoRequest{}
}

func (p *QingyuGetSocialInfoRequest) InitDefault() {
	*p = QingyuGetSocialInfoRequest{}
}

func (p *QingyuGetSocialInfoRequest) GetViewerId() (v int64) {
	return p.ViewerId
}

func (p *QingyuGetSocialInfoRequest) GetOwnerId() (v int64) {
	return p.OwnerId
}
func (p *QingyuGetSocialInfoRequest) SetViewerId(val int64) {
	p.ViewerId = val
}
func (p *QingyuGetSocialInfoRequest) SetOwnerId(val int64) {
	p.OwnerId = val
}

var fieldIDToName_QingyuGetSocialInfoRequest = map[int16]string{
	1: "viewer_id",
	2: "owner_id",
}

func (p *QingyuGetSocialInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuGetSocialInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuGetSocialInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ViewerId = v
	}
	return nil
}

func (p *QingyuGetSocialInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OwnerId = v
	}
	return nil
}

func (p *QingyuGetSocialInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_get_social_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuGetSocialInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("viewer_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ViewerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuGetSocialInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OwnerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuGetSocialInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuGetSocialInfoRequest(%+v)", *p)
}

func (p *QingyuGetSocialInfoRequest) DeepEqual(ano *QingyuGetSocialInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ViewerId) {
		return false
	}
	if !p.Field2DeepEqual(ano.OwnerId) {
		return false
	}
	return true
}

func (p *QingyuGetSocialInfoRequest) Field1DeepEqual(src int64) bool {

	if p.ViewerId != src {
		return false
	}
	return true
}
func (p *QingyuGetSocialInfoRequest) Field2DeepEqual(src int64) bool {

	if p.OwnerId != src {
		return false
	}
	return true
}

type QingyuGetSocialInfoResponse struct {
	BaseResp   *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
	SocialInfo *base.SocialInfo         `thrift:"social_info,2" frugal:"2,default,base.SocialInfo" json:"social_info"`
}

func NewQingyuGetSocialInfoResponse() *QingyuGetSocialInfoResponse {
	return &QingyuGetSocialInfoResponse{}
}

func (p *QingyuGetSocialInfoResponse) InitDefault() {
	*p = QingyuGetSocialInfoResponse{}
}

var QingyuGetSocialInfoResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuGetSocialInfoResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuGetSocialInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var QingyuGetSocialInfoResponse_SocialInfo_DEFAULT *base.SocialInfo

func (p *QingyuGetSocialInfoResponse) GetSocialInfo() (v *base.SocialInfo) {
	if !p.IsSetSocialInfo() {
		return QingyuGetSocialInfoResponse_SocialInfo_DEFAULT
	}
	return p.SocialInfo
}
func (p *QingyuGetSocialInfoResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}
func (p *QingyuGetSocialInfoResponse) SetSocialInfo(val *base.SocialInfo) {
	p.SocialInfo = val
}

var fieldIDToName_QingyuGetSocialInfoResponse = map[int16]string{
	1: "base_resp",
	2: "social_info",
}

func (p *QingyuGetSocialInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuGetSocialInfoResponse) IsSetSocialInfo() bool {
	return p.SocialInfo != nil
}

func (p *QingyuGetSocialInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuGetSocialInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuGetSocialInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuGetSocialInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.SocialInfo = base.NewSocialInfo()
	if err := p.SocialInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuGetSocialInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_get_social_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuGetSocialInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuGetSocialInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("social_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SocialInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuGetSocialInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuGetSocialInfoResponse(%+v)", *p)
}

func (p *QingyuGetSocialInfoResponse) DeepEqual(ano *QingyuGetSocialInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.SocialInfo) {
		return false
	}
	return true
}

func (p *QingyuGetSocialInfoResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QingyuGetSocialInfoResponse) Field2DeepEqual(src *base.SocialInfo) bool {

	if !p.SocialInfo.DeepEqual(src) {
		return false
	}
	return true
}

type QingyuBatchGetSocialInfoRequest struct {
	ViewerId    int64   `thrift:"viewer_id,1" frugal:"1,default,i64" json:"viewer_id"`
	OwnerIdList []int64 `thrift:"owner_id_list,2" frugal:"2,default,list<i64>" json:"owner_id_list"`
}

func NewQingyuBatchGetSocialInfoRequest() *QingyuBatchGetSocialInfoRequest {
	return &QingyuBatchGetSocialInfoRequest{}
}

func (p *QingyuBatchGetSocialInfoRequest) InitDefault() {
	*p = QingyuBatchGetSocialInfoRequest{}
}

func (p *QingyuBatchGetSocialInfoRequest) GetViewerId() (v int64) {
	return p.ViewerId
}

func (p *QingyuBatchGetSocialInfoRequest) GetOwnerIdList() (v []int64) {
	return p.OwnerIdList
}
func (p *QingyuBatchGetSocialInfoRequest) SetViewerId(val int64) {
	p.ViewerId = val
}
func (p *QingyuBatchGetSocialInfoRequest) SetOwnerIdList(val []int64) {
	p.OwnerIdList = val
}

var fieldIDToName_QingyuBatchGetSocialInfoRequest = map[int16]string{
	1: "viewer_id",
	2: "owner_id_list",
}

func (p *QingyuBatchGetSocialInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuBatchGetSocialInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ViewerId = v
	}
	return nil
}

func (p *QingyuBatchGetSocialInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.OwnerIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.OwnerIdList = append(p.OwnerIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *QingyuBatchGetSocialInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_batch_get_social_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("viewer_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ViewerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner_id_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.OwnerIdList)); err != nil {
		return err
	}
	for _, v := range p.OwnerIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuBatchGetSocialInfoRequest(%+v)", *p)
}

func (p *QingyuBatchGetSocialInfoRequest) DeepEqual(ano *QingyuBatchGetSocialInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ViewerId) {
		return false
	}
	if !p.Field2DeepEqual(ano.OwnerIdList) {
		return false
	}
	return true
}

func (p *QingyuBatchGetSocialInfoRequest) Field1DeepEqual(src int64) bool {

	if p.ViewerId != src {
		return false
	}
	return true
}
func (p *QingyuBatchGetSocialInfoRequest) Field2DeepEqual(src []int64) bool {

	if len(p.OwnerIdList) != len(src) {
		return false
	}
	for i, v := range p.OwnerIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type QingyuBatchGetSocialInfoResponse struct {
	BaseResp       *base.QingyuBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.QingyuBaseResponse" json:"base_resp"`
	SocialInfoList []*base.SocialInfo       `thrift:"social_info_list,2" frugal:"2,default,list<base.SocialInfo>" json:"social_info_list"`
}

func NewQingyuBatchGetSocialInfoResponse() *QingyuBatchGetSocialInfoResponse {
	return &QingyuBatchGetSocialInfoResponse{}
}

func (p *QingyuBatchGetSocialInfoResponse) InitDefault() {
	*p = QingyuBatchGetSocialInfoResponse{}
}

var QingyuBatchGetSocialInfoResponse_BaseResp_DEFAULT *base.QingyuBaseResponse

func (p *QingyuBatchGetSocialInfoResponse) GetBaseResp() (v *base.QingyuBaseResponse) {
	if !p.IsSetBaseResp() {
		return QingyuBatchGetSocialInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *QingyuBatchGetSocialInfoResponse) GetSocialInfoList() (v []*base.SocialInfo) {
	return p.SocialInfoList
}
func (p *QingyuBatchGetSocialInfoResponse) SetBaseResp(val *base.QingyuBaseResponse) {
	p.BaseResp = val
}
func (p *QingyuBatchGetSocialInfoResponse) SetSocialInfoList(val []*base.SocialInfo) {
	p.SocialInfoList = val
}

var fieldIDToName_QingyuBatchGetSocialInfoResponse = map[int16]string{
	1: "base_resp",
	2: "social_info_list",
}

func (p *QingyuBatchGetSocialInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QingyuBatchGetSocialInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QingyuBatchGetSocialInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewQingyuBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QingyuBatchGetSocialInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SocialInfoList = make([]*base.SocialInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewSocialInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SocialInfoList = append(p.SocialInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *QingyuBatchGetSocialInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("qingyu_batch_get_social_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("social_info_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SocialInfoList)); err != nil {
		return err
	}
	for _, v := range p.SocialInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QingyuBatchGetSocialInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QingyuBatchGetSocialInfoResponse(%+v)", *p)
}

func (p *QingyuBatchGetSocialInfoResponse) DeepEqual(ano *QingyuBatchGetSocialInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.SocialInfoList) {
		return false
	}
	return true
}

func (p *QingyuBatchGetSocialInfoResponse) Field1DeepEqual(src *base.QingyuBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QingyuBatchGetSocialInfoResponse) Field2DeepEqual(src []*base.SocialInfo) bool {

	if len(p.SocialInfoList) != len(src) {
		return false
	}
	for i, v := range p.SocialInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SocialityService interface {
	Action(ctx context.Context, req *QingyuRelationActionRequest) (r *QingyuRelationActionResponse, err error)

	GetRelationIdList(ctx context.Context, req *QingyuGetRelationIdListRequest) (r *QingyuGetRelationIdListResponse, err error)

	GetSocialInfo(ctx context.Context, req *QingyuGetSocialInfoRequest) (r *QingyuGetSocialInfoResponse, err error)

	BatchGetSocialInfo(ctx context.Context, req *QingyuBatchGetSocialInfoRequest) (r *QingyuBatchGetSocialInfoResponse, err error)
}

type SocialityServiceClient struct {
	c thrift.TClient
}

func NewSocialityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SocialityServiceClient {
	return &SocialityServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSocialityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SocialityServiceClient {
	return &SocialityServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSocialityServiceClient(c thrift.TClient) *SocialityServiceClient {
	return &SocialityServiceClient{
		c: c,
	}
}

func (p *SocialityServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *SocialityServiceClient) Action(ctx context.Context, req *QingyuRelationActionRequest) (r *QingyuRelationActionResponse, err error) {
	var _args SocialityServiceActionArgs
	_args.Req = req
	var _result SocialityServiceActionResult
	if err = p.Client_().Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialityServiceClient) GetRelationIdList(ctx context.Context, req *QingyuGetRelationIdListRequest) (r *QingyuGetRelationIdListResponse, err error) {
	var _args SocialityServiceGetRelationIdListArgs
	_args.Req = req
	var _result SocialityServiceGetRelationIdListResult
	if err = p.Client_().Call(ctx, "GetRelationIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialityServiceClient) GetSocialInfo(ctx context.Context, req *QingyuGetSocialInfoRequest) (r *QingyuGetSocialInfoResponse, err error) {
	var _args SocialityServiceGetSocialInfoArgs
	_args.Req = req
	var _result SocialityServiceGetSocialInfoResult
	if err = p.Client_().Call(ctx, "GetSocialInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocialityServiceClient) BatchGetSocialInfo(ctx context.Context, req *QingyuBatchGetSocialInfoRequest) (r *QingyuBatchGetSocialInfoResponse, err error) {
	var _args SocialityServiceBatchGetSocialInfoArgs
	_args.Req = req
	var _result SocialityServiceBatchGetSocialInfoResult
	if err = p.Client_().Call(ctx, "BatchGetSocialInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type SocialityServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SocialityService
}

func (p *SocialityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SocialityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SocialityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSocialityServiceProcessor(handler SocialityService) *SocialityServiceProcessor {
	self := &SocialityServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Action", &socialityServiceProcessorAction{handler: handler})
	self.AddToProcessorMap("GetRelationIdList", &socialityServiceProcessorGetRelationIdList{handler: handler})
	self.AddToProcessorMap("GetSocialInfo", &socialityServiceProcessorGetSocialInfo{handler: handler})
	self.AddToProcessorMap("BatchGetSocialInfo", &socialityServiceProcessorBatchGetSocialInfo{handler: handler})
	return self
}
func (p *SocialityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type socialityServiceProcessorAction struct {
	handler SocialityService
}

func (p *socialityServiceProcessorAction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialityServiceActionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Action", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialityServiceActionResult{}
	var retval *QingyuRelationActionResponse
	if retval, err2 = p.handler.Action(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Action: "+err2.Error())
		oprot.WriteMessageBegin("Action", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Action", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialityServiceProcessorGetRelationIdList struct {
	handler SocialityService
}

func (p *socialityServiceProcessorGetRelationIdList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialityServiceGetRelationIdListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRelationIdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialityServiceGetRelationIdListResult{}
	var retval *QingyuGetRelationIdListResponse
	if retval, err2 = p.handler.GetRelationIdList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRelationIdList: "+err2.Error())
		oprot.WriteMessageBegin("GetRelationIdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRelationIdList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialityServiceProcessorGetSocialInfo struct {
	handler SocialityService
}

func (p *socialityServiceProcessorGetSocialInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialityServiceGetSocialInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialityServiceGetSocialInfoResult{}
	var retval *QingyuGetSocialInfoResponse
	if retval, err2 = p.handler.GetSocialInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSocialInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSocialInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type socialityServiceProcessorBatchGetSocialInfo struct {
	handler SocialityService
}

func (p *socialityServiceProcessorBatchGetSocialInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocialityServiceBatchGetSocialInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocialityServiceBatchGetSocialInfoResult{}
	var retval *QingyuBatchGetSocialInfoResponse
	if retval, err2 = p.handler.BatchGetSocialInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetSocialInfo: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetSocialInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SocialityServiceActionArgs struct {
	Req *QingyuRelationActionRequest `thrift:"req,1" frugal:"1,default,QingyuRelationActionRequest" json:"req"`
}

func NewSocialityServiceActionArgs() *SocialityServiceActionArgs {
	return &SocialityServiceActionArgs{}
}

func (p *SocialityServiceActionArgs) InitDefault() {
	*p = SocialityServiceActionArgs{}
}

var SocialityServiceActionArgs_Req_DEFAULT *QingyuRelationActionRequest

func (p *SocialityServiceActionArgs) GetReq() (v *QingyuRelationActionRequest) {
	if !p.IsSetReq() {
		return SocialityServiceActionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialityServiceActionArgs) SetReq(val *QingyuRelationActionRequest) {
	p.Req = val
}

var fieldIDToName_SocialityServiceActionArgs = map[int16]string{
	1: "req",
}

func (p *SocialityServiceActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialityServiceActionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceActionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceActionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuRelationActionRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceActionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Action_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialityServiceActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceActionArgs(%+v)", *p)
}

func (p *SocialityServiceActionArgs) DeepEqual(ano *SocialityServiceActionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialityServiceActionArgs) Field1DeepEqual(src *QingyuRelationActionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SocialityServiceActionResult struct {
	Success *QingyuRelationActionResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuRelationActionResponse" json:"success,omitempty"`
}

func NewSocialityServiceActionResult() *SocialityServiceActionResult {
	return &SocialityServiceActionResult{}
}

func (p *SocialityServiceActionResult) InitDefault() {
	*p = SocialityServiceActionResult{}
}

var SocialityServiceActionResult_Success_DEFAULT *QingyuRelationActionResponse

func (p *SocialityServiceActionResult) GetSuccess() (v *QingyuRelationActionResponse) {
	if !p.IsSetSuccess() {
		return SocialityServiceActionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialityServiceActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuRelationActionResponse)
}

var fieldIDToName_SocialityServiceActionResult = map[int16]string{
	0: "success",
}

func (p *SocialityServiceActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialityServiceActionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceActionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceActionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuRelationActionResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceActionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Action_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceActionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialityServiceActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceActionResult(%+v)", *p)
}

func (p *SocialityServiceActionResult) DeepEqual(ano *SocialityServiceActionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialityServiceActionResult) Field0DeepEqual(src *QingyuRelationActionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SocialityServiceGetRelationIdListArgs struct {
	Req *QingyuGetRelationIdListRequest `thrift:"req,1" frugal:"1,default,QingyuGetRelationIdListRequest" json:"req"`
}

func NewSocialityServiceGetRelationIdListArgs() *SocialityServiceGetRelationIdListArgs {
	return &SocialityServiceGetRelationIdListArgs{}
}

func (p *SocialityServiceGetRelationIdListArgs) InitDefault() {
	*p = SocialityServiceGetRelationIdListArgs{}
}

var SocialityServiceGetRelationIdListArgs_Req_DEFAULT *QingyuGetRelationIdListRequest

func (p *SocialityServiceGetRelationIdListArgs) GetReq() (v *QingyuGetRelationIdListRequest) {
	if !p.IsSetReq() {
		return SocialityServiceGetRelationIdListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialityServiceGetRelationIdListArgs) SetReq(val *QingyuGetRelationIdListRequest) {
	p.Req = val
}

var fieldIDToName_SocialityServiceGetRelationIdListArgs = map[int16]string{
	1: "req",
}

func (p *SocialityServiceGetRelationIdListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialityServiceGetRelationIdListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceGetRelationIdListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceGetRelationIdListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuGetRelationIdListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceGetRelationIdListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRelationIdList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceGetRelationIdListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialityServiceGetRelationIdListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceGetRelationIdListArgs(%+v)", *p)
}

func (p *SocialityServiceGetRelationIdListArgs) DeepEqual(ano *SocialityServiceGetRelationIdListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialityServiceGetRelationIdListArgs) Field1DeepEqual(src *QingyuGetRelationIdListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SocialityServiceGetRelationIdListResult struct {
	Success *QingyuGetRelationIdListResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuGetRelationIdListResponse" json:"success,omitempty"`
}

func NewSocialityServiceGetRelationIdListResult() *SocialityServiceGetRelationIdListResult {
	return &SocialityServiceGetRelationIdListResult{}
}

func (p *SocialityServiceGetRelationIdListResult) InitDefault() {
	*p = SocialityServiceGetRelationIdListResult{}
}

var SocialityServiceGetRelationIdListResult_Success_DEFAULT *QingyuGetRelationIdListResponse

func (p *SocialityServiceGetRelationIdListResult) GetSuccess() (v *QingyuGetRelationIdListResponse) {
	if !p.IsSetSuccess() {
		return SocialityServiceGetRelationIdListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialityServiceGetRelationIdListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuGetRelationIdListResponse)
}

var fieldIDToName_SocialityServiceGetRelationIdListResult = map[int16]string{
	0: "success",
}

func (p *SocialityServiceGetRelationIdListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialityServiceGetRelationIdListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceGetRelationIdListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceGetRelationIdListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuGetRelationIdListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceGetRelationIdListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRelationIdList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceGetRelationIdListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialityServiceGetRelationIdListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceGetRelationIdListResult(%+v)", *p)
}

func (p *SocialityServiceGetRelationIdListResult) DeepEqual(ano *SocialityServiceGetRelationIdListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialityServiceGetRelationIdListResult) Field0DeepEqual(src *QingyuGetRelationIdListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SocialityServiceGetSocialInfoArgs struct {
	Req *QingyuGetSocialInfoRequest `thrift:"req,1" frugal:"1,default,QingyuGetSocialInfoRequest" json:"req"`
}

func NewSocialityServiceGetSocialInfoArgs() *SocialityServiceGetSocialInfoArgs {
	return &SocialityServiceGetSocialInfoArgs{}
}

func (p *SocialityServiceGetSocialInfoArgs) InitDefault() {
	*p = SocialityServiceGetSocialInfoArgs{}
}

var SocialityServiceGetSocialInfoArgs_Req_DEFAULT *QingyuGetSocialInfoRequest

func (p *SocialityServiceGetSocialInfoArgs) GetReq() (v *QingyuGetSocialInfoRequest) {
	if !p.IsSetReq() {
		return SocialityServiceGetSocialInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialityServiceGetSocialInfoArgs) SetReq(val *QingyuGetSocialInfoRequest) {
	p.Req = val
}

var fieldIDToName_SocialityServiceGetSocialInfoArgs = map[int16]string{
	1: "req",
}

func (p *SocialityServiceGetSocialInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialityServiceGetSocialInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceGetSocialInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceGetSocialInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuGetSocialInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceGetSocialInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSocialInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceGetSocialInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialityServiceGetSocialInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceGetSocialInfoArgs(%+v)", *p)
}

func (p *SocialityServiceGetSocialInfoArgs) DeepEqual(ano *SocialityServiceGetSocialInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialityServiceGetSocialInfoArgs) Field1DeepEqual(src *QingyuGetSocialInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SocialityServiceGetSocialInfoResult struct {
	Success *QingyuGetSocialInfoResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuGetSocialInfoResponse" json:"success,omitempty"`
}

func NewSocialityServiceGetSocialInfoResult() *SocialityServiceGetSocialInfoResult {
	return &SocialityServiceGetSocialInfoResult{}
}

func (p *SocialityServiceGetSocialInfoResult) InitDefault() {
	*p = SocialityServiceGetSocialInfoResult{}
}

var SocialityServiceGetSocialInfoResult_Success_DEFAULT *QingyuGetSocialInfoResponse

func (p *SocialityServiceGetSocialInfoResult) GetSuccess() (v *QingyuGetSocialInfoResponse) {
	if !p.IsSetSuccess() {
		return SocialityServiceGetSocialInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialityServiceGetSocialInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuGetSocialInfoResponse)
}

var fieldIDToName_SocialityServiceGetSocialInfoResult = map[int16]string{
	0: "success",
}

func (p *SocialityServiceGetSocialInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialityServiceGetSocialInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceGetSocialInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceGetSocialInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuGetSocialInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceGetSocialInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSocialInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceGetSocialInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialityServiceGetSocialInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceGetSocialInfoResult(%+v)", *p)
}

func (p *SocialityServiceGetSocialInfoResult) DeepEqual(ano *SocialityServiceGetSocialInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialityServiceGetSocialInfoResult) Field0DeepEqual(src *QingyuGetSocialInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SocialityServiceBatchGetSocialInfoArgs struct {
	Req *QingyuBatchGetSocialInfoRequest `thrift:"req,1" frugal:"1,default,QingyuBatchGetSocialInfoRequest" json:"req"`
}

func NewSocialityServiceBatchGetSocialInfoArgs() *SocialityServiceBatchGetSocialInfoArgs {
	return &SocialityServiceBatchGetSocialInfoArgs{}
}

func (p *SocialityServiceBatchGetSocialInfoArgs) InitDefault() {
	*p = SocialityServiceBatchGetSocialInfoArgs{}
}

var SocialityServiceBatchGetSocialInfoArgs_Req_DEFAULT *QingyuBatchGetSocialInfoRequest

func (p *SocialityServiceBatchGetSocialInfoArgs) GetReq() (v *QingyuBatchGetSocialInfoRequest) {
	if !p.IsSetReq() {
		return SocialityServiceBatchGetSocialInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialityServiceBatchGetSocialInfoArgs) SetReq(val *QingyuBatchGetSocialInfoRequest) {
	p.Req = val
}

var fieldIDToName_SocialityServiceBatchGetSocialInfoArgs = map[int16]string{
	1: "req",
}

func (p *SocialityServiceBatchGetSocialInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialityServiceBatchGetSocialInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceBatchGetSocialInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceBatchGetSocialInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQingyuBatchGetSocialInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceBatchGetSocialInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSocialInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceBatchGetSocialInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocialityServiceBatchGetSocialInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceBatchGetSocialInfoArgs(%+v)", *p)
}

func (p *SocialityServiceBatchGetSocialInfoArgs) DeepEqual(ano *SocialityServiceBatchGetSocialInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocialityServiceBatchGetSocialInfoArgs) Field1DeepEqual(src *QingyuBatchGetSocialInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SocialityServiceBatchGetSocialInfoResult struct {
	Success *QingyuBatchGetSocialInfoResponse `thrift:"success,0,optional" frugal:"0,optional,QingyuBatchGetSocialInfoResponse" json:"success,omitempty"`
}

func NewSocialityServiceBatchGetSocialInfoResult() *SocialityServiceBatchGetSocialInfoResult {
	return &SocialityServiceBatchGetSocialInfoResult{}
}

func (p *SocialityServiceBatchGetSocialInfoResult) InitDefault() {
	*p = SocialityServiceBatchGetSocialInfoResult{}
}

var SocialityServiceBatchGetSocialInfoResult_Success_DEFAULT *QingyuBatchGetSocialInfoResponse

func (p *SocialityServiceBatchGetSocialInfoResult) GetSuccess() (v *QingyuBatchGetSocialInfoResponse) {
	if !p.IsSetSuccess() {
		return SocialityServiceBatchGetSocialInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialityServiceBatchGetSocialInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*QingyuBatchGetSocialInfoResponse)
}

var fieldIDToName_SocialityServiceBatchGetSocialInfoResult = map[int16]string{
	0: "success",
}

func (p *SocialityServiceBatchGetSocialInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialityServiceBatchGetSocialInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocialityServiceBatchGetSocialInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocialityServiceBatchGetSocialInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQingyuBatchGetSocialInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocialityServiceBatchGetSocialInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSocialInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocialityServiceBatchGetSocialInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocialityServiceBatchGetSocialInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialityServiceBatchGetSocialInfoResult(%+v)", *p)
}

func (p *SocialityServiceBatchGetSocialInfoResult) DeepEqual(ano *SocialityServiceBatchGetSocialInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocialityServiceBatchGetSocialInfoResult) Field0DeepEqual(src *QingyuBatchGetSocialInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
