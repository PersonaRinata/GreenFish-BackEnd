// Code generated by Kitex v0.7.3. DO NOT EDIT.

package userservice

import (
	user "GreenFish/server/kitex_gen/user"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, req *user.QingyuUserRegisterRequest, callOptions ...callopt.Option) (r *user.QingyuUserRegisterResponse, err error)
	Login(ctx context.Context, req *user.QingyuUserLoginRequest, callOptions ...callopt.Option) (r *user.QingyuUserLoginResponse, err error)
	GetUserInfo(ctx context.Context, req *user.QingyuGetUserRequest, callOptions ...callopt.Option) (r *user.QingyuGetUserResponse, err error)
	BatchGetUserInfo(ctx context.Context, req *user.QingyuBatchGetUserRequest, callOptions ...callopt.Option) (r *user.QingyuBatchGetUserResonse, err error)
	GetFollowList(ctx context.Context, req *user.QingyuGetRelationFollowListRequest, callOptions ...callopt.Option) (r *user.QingyuGetRelationFollowListResponse, err error)
	GetFollowerList(ctx context.Context, req *user.QingyuGetRelationFollowerListRequest, callOptions ...callopt.Option) (r *user.QingyuGetRelationFollowerListResponse, err error)
	GetFriendList(ctx context.Context, req *user.QingyuGetRelationFriendListRequest, callOptions ...callopt.Option) (r *user.QingyuGetRelationFriendListResponse, err error)
	UpdateIssueList(ctx context.Context, req *user.QingyuUpdateIssueListRequest, callOptions ...callopt.Option) (r *user.QingyuUpdateIssueListResponse, err error)
	GetIssueList(ctx context.Context, req *user.QingyuGetIssueListRequest, callOptions ...callopt.Option) (r *user.QingyuGetIssueListResponse, err error)
	SearchUserList(ctx context.Context, req *user.QingyuSearchUserRequest, callOptions ...callopt.Option) (r *user.QingyuSearchUserResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Register(ctx context.Context, req *user.QingyuUserRegisterRequest, callOptions ...callopt.Option) (r *user.QingyuUserRegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, req)
}

func (p *kUserServiceClient) Login(ctx context.Context, req *user.QingyuUserLoginRequest, callOptions ...callopt.Option) (r *user.QingyuUserLoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kUserServiceClient) GetUserInfo(ctx context.Context, req *user.QingyuGetUserRequest, callOptions ...callopt.Option) (r *user.QingyuGetUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfo(ctx, req)
}

func (p *kUserServiceClient) BatchGetUserInfo(ctx context.Context, req *user.QingyuBatchGetUserRequest, callOptions ...callopt.Option) (r *user.QingyuBatchGetUserResonse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetUserInfo(ctx, req)
}

func (p *kUserServiceClient) GetFollowList(ctx context.Context, req *user.QingyuGetRelationFollowListRequest, callOptions ...callopt.Option) (r *user.QingyuGetRelationFollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowList(ctx, req)
}

func (p *kUserServiceClient) GetFollowerList(ctx context.Context, req *user.QingyuGetRelationFollowerListRequest, callOptions ...callopt.Option) (r *user.QingyuGetRelationFollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerList(ctx, req)
}

func (p *kUserServiceClient) GetFriendList(ctx context.Context, req *user.QingyuGetRelationFriendListRequest, callOptions ...callopt.Option) (r *user.QingyuGetRelationFriendListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFriendList(ctx, req)
}

func (p *kUserServiceClient) UpdateIssueList(ctx context.Context, req *user.QingyuUpdateIssueListRequest, callOptions ...callopt.Option) (r *user.QingyuUpdateIssueListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateIssueList(ctx, req)
}

func (p *kUserServiceClient) GetIssueList(ctx context.Context, req *user.QingyuGetIssueListRequest, callOptions ...callopt.Option) (r *user.QingyuGetIssueListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetIssueList(ctx, req)
}

func (p *kUserServiceClient) SearchUserList(ctx context.Context, req *user.QingyuSearchUserRequest, callOptions ...callopt.Option) (r *user.QingyuSearchUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchUserList(ctx, req)
}
